#####################################################################################
# outcome_stats.yaml
#####################################################################################
#
# This workflow:
#
# Example command-line usage:
# kurator -f outcome_stats.yaml
#         -p inputfile=packages/kurator_fp/data/occurrence_qc.json
#         -l DEBUG (optional)
#
# Requires:
# jython pip install configparser
# jython pip install xlsxwriter
# jython pip install unidecode
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "David B. Lowery"
# __copyright__ = "Copyright 2016 President and Fellows of Harvard College"
# __version__ = "native_python.yaml 2017-01-30T16:07:09-0500"

imports:

- classpath:/org/kurator/validation/actors.yaml

components:

# Inline python actor to make a workspace on the fly to use for writing temporary
# if one is not supplied in the workflow-defined parameters. It creates a unique
# workspace if a workspace location is not explicitly provided, or if the provided
# one does not exist.
- id: MakeWorkspace
  type: NativePythonActor
  properties:
    onStart: on_start
    # Inline python code to run.
    code: |
        import uuid
        import os
        # The function to run when an on_start message is received. Accepts a dictionary
        # of options.
        def on_start(options):
            actor = 'MakeWorkspace'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                print '%s: %s' % (key, value)
            options['success']=True
            if options.has_key('workspace') == False:
                options['workspace'] ='./workspace_'+str(uuid.uuid1())
            if not os.path.exists(options['workspace']):
                os.makedirs(options['workspace'])
            if not os.path.exists(options['workspace']):
                options['success']=False
                options['message']='Unable to create workspace at %s' % options[workspace]
            else:
                options['message']='Created workspace %s' % options['workspace']
            return options

# Test native python actor
- id: NativeTest
  type: NativePythonActor
  properties:
    module: kurator_native.Test
    onData: test
    inputs:
      workspace : workspace
    parameters:
      firstname: "Bob"
      lastname: "Morris"
    listensTo:
      - !ref MakeWorkspace

# Inline python actor to take care of any unfinished business and finish the workflow.
- id: WrapUp
  type: NativePythonActor
  properties:
    onData: on_data
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        def on_data(options):
            actor = 'WrapUp'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                if key == 'artifacts':
                    print 'artifacts:'
                    keylist = []
                    for akey, avalue in options[key].iteritems():
                        keylist.append(akey)
                    sortedkeylist = sorted(keylist)
                    for skey in sortedkeylist:
                        print '  %s: %s' % (skey, options[key][skey])
                else:
                    print '%s: %s' % (key, value)
            print '### Finished Wrapup ###'
    # A list of parameters to get from the options dictionary passed from an
    # upstream actor.
    inputs:
        # Get the workspace for this actor from the workspace in the options dictionary.
        workspace: workspace
        # Get the success state from the options dictionary of the previous step
        success: previoussuccess
        # Get the message from the options dictionary of the previous step
        message: previousmessage
    parameters:
      # Show the name of the upstream actor.
      messagefrom: 'NativeTest'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref NativeTest

- id: NativeTestWorkflow
  type: Workflow
  properties:
    actors:
      - !ref MakeWorkspace
      - !ref NativeTest
      - !ref WrapUp