#####################################################################################
# file_geography_cleaner.yaml
#####################################################################################
#
# This workflow:
#    - creates a given directory as a workspace
#    - downloads a geography lookup file
#    - downloads a country lookup file
#    - accepts an uploaded csv or txt file
#    - extracts distinct values of various geography fields from the uploaded file
#    - reports recommendations for geography
#    - reports counts of distinct geography combinations
#    - reports combinations of geography not found in the geography lookup file
#    - reports counts of distinct original country values
#    - reports countries not found in the country lookup file
#    - wraps up the workflow
#
# Example command-line usage:
# kurator -f file_geography_cleaner.yaml 
#         -p workspace=./file_geography_cleaner_workspace
#         -p inputfile=../data/tests/test_bat_agave_data_idigbio.csv
#         -p outputfile=cleaneddata.csv
#         -p format=csv
#         -l DEBUG (optional)
#
# Requires:
# jython pip install requests
# jython pip install python-dwca-reader
# jython pip install py
# jython pip install unicodecsv
# jython pip install unidecode
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "John Wieczorek"
# __copyright__ = "Copyright 2017 President and Fellows of Harvard College"
# __version__ = "file_geography_cleaner.yaml 2017-11-07T12:30-03:00"

imports:

- classpath:/org/kurator/akka/types.yaml

# Definitions of the Workflow and actors
components:

### The named workflow ###
- id: DwCAGeographyCleaner
  type: Workflow
  properties:
    actors:
      # Actors invoked in the workflow. Every actor that will be invoked must be on this
      # list. Though the order does not matter, it is helpful to keep the list in more
      # or less the order in which they'll be invoked, for clarity.
      - !ref MakeWorkspace
      - !ref DownloadGeographyLookup
      - !ref DownloadCountryLookup
      - !ref DownloadDarwinCloudLookup
      - !ref Darwinize
      - !ref CountFieldValues
      - !ref CreateGeographyReport
      - !ref CreateGeographyCountReport
      - !ref CreateMissingGeographyReport
      - !ref CreateCountryCountReport
      - !ref CreateMissingCountryReport
      - !ref CreateFileWithCleanGeography
      - !ref WrapUp
    # Each parameter defined here enters the workflow from the command line and is 
    # delivered in the options dictionary of the specified actor.
    parameters:
      # Accept a parameter called workspace from the command line.
      workspace:
        # Set the workspace in the options dictionary of MakeWorkspace from the value of
        # the workspace parameter given on the command line.
        actor: !ref MakeWorkspace
        parameter: workspace
      # Accept a parameter called inputfile from the command line.
      inputfile:
        # Set the inputfile in the options dictionary of Darwinize from the 
        # value of the inputfile parameter given on the command line.
        actor: !ref Darwinize
        parameter: inputfile
      # Accept a parameter called outputfile from the command line.
      outputfile:
        # Set the outputfile in the options dictionary of CreateFileWithCleanGeography
        # from the value of the outputfile parameter given on the command line.
        actor: !ref CreateFileWithCleanGeography
        parameter: outputfile
      # Accept a parameter called format from the command line.
      format:
        # Set the format in the options dictionary of CreateFileWithCleanGeography from 
        # the value of the format parameter given on the command line.
        actor: !ref CreateFileWithCleanGeography
        parameter: format

# Inline python actor to make a workspace on the fly to use for writing temporary 
# if one is not supplied in the workflow-defined parameters. It creates a unique
# workspace if a workspace location is not explicitly provided, or if the provided
# one does not exist.
- id: MakeWorkspace
  type: NativePythonActor
  properties:
    onStart: on_start
    # Inline python code to run.
    code: |
        import uuid
        import os
        # The function to run when an on_start message is received. Accepts a dictionary
        # of options.
        def on_start(options):
            print '### Started MakeWorkspace ###'
            print 'MakeWorkspace options: %s' % options
            options['success']=True
            if options.has_key('workspace') == False:
                options['workspace'] ='./workspace_'+str(uuid.uuid1())
            if not os.path.exists(options['workspace']):
                os.makedirs(options['workspace'])
            if not os.path.exists(options['workspace']):
                options['success']=False
                options['message']='Unable to create workspace at %s' % options[workspace]
            else:
                options['message']='Created workspace %s' % options['workspace']
            return options

# Download file containing geography key to standard geography lookup.
- id: DownloadGeographyLookup
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Get the file from a specific URL.
      url : 'https://raw.githubusercontent.com/VertNet/DwCvocabs/master/kurator/dwc_geography.txt'
      # Download to a specific file name in the workspace received from upstream.
      outputfile : 'lookup_geography.txt'
      # Show the name of the upstream actor.
      messagefrom: 'MakeWorkspace'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref MakeWorkspace

# Download file containing raw country to standard country lookup.
- id: DownloadCountryLookup
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Get the file from a specific URL.
      url : 'https://raw.githubusercontent.com/VertNet/DwCvocabs/master/kurator/country.txt'
      # Download to a specific file name within the workspace.
      outputfile : 'lookup_country.txt'
      # Show the name of the upstream actor.
      messagefrom: 'DownloadGeographyLookup'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref DownloadGeographyLookup

# Download file containing raw field names to Darwin Core field names lookups.
- id: DownloadDarwinCloudLookup
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Get the file from a specific URL.
      url : 'https://raw.githubusercontent.com/tucotuco/DwCVocabs/master/kurator/darwin_cloud.txt'
      # Download to a specific file name in the workspace received from upstream.
      # Set the output file to a specific file name.
      outputfile : 'lookup_darwin_cloud.txt'
      # Show the name of the upstream actor.
      messagefrom: 'MakeWorkspace'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref DownloadCountryLookup

# Transform the input file to a file with the chosen format and as many field names 
# standardized to Darwin Core as possible.
- id: Darwinize
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.darwinize_header
    # The function to invoke in the module when the actor receives an onData message.
    onData: darwinize_header
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the dwccloudfile for this actor from the outputfile in the options dictionary.
      outputfile : dwccloudfile
      # Get the success state of the previous step from the options dictionary.
      success: previoussuccess
      # Get the message from the previous step from the options dictionary.
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the output file to a specific file name.
      outputfile : 'darwinized_file.csv'
      # Show the name of the upstream actor.
      messagefrom: 'DownloadDarwinCloudLookup'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref DownloadDarwinCloudLookup

# Inline python actor to create distinct value counts of all DwC terms recommended to 
# follow controlled vocabularies.
- id: CountFieldValues
  type: NativePythonActor
  properties:
    onData: on_data
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        from kurator_dwca.dwca_utils import read_header
        from kurator_dwca.dwca_utils import clean_header
        from kurator_dwca.dwca_utils import csv_file_encoding
        from kurator_dwca.dwca_terms import controlledtermlist
        from kurator_dwca.term_value_count_reporter import term_value_count_reporter
        def on_data(options):
            actor = 'CountFieldValues'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                print '%s: %s' % (key, value)

            # Get the format for the output files, with 'csv' as the default
            try:
                format = options['format']
            except:
                format = 'csv'

            # Figure out the input file encoding first. It will makes things much faster
            # to know it in advance and pass that information to various steps.
            #encoding = csv_file_encoding(options['inputfile'])
            encoding = 'utf-8'
            header = read_header(options['inputfile'], encoding=encoding)

            # Create a cleaned list of fields from the input file
            cleanheader = clean_header(header)

            # List of terms for which to get distinct value counts.
            cleantermlist = ['continent', 'country', 'countrycode', 'stateprovince', \
              'county', 'municipality', 'waterbody', 'islandgroup', 'island']

            # Get a list of fields from those of interest that actually exist in the 
            # inputfile
            termlist = []
            for term in cleantermlist:
                if term in cleanheader:
                    termlist.append(term)

            # Prepare the output dictionary
            outputoptions = {}
            outputoptions['success'] = True
            outputoptions['message'] = None
            outputoptions['workspace'] = options['workspace']
            outputoptions['outputfile'] = options['inputfile']
            outputoptions['encoding'] = encoding
            outputoptions['artifacts'] = {}

            # Cycle through all of the fields of interest in the inputfile
            for term in termlist:
                filename = 'count_'+term.lower()+'.'+format

                # Prepare the options dictionary for the term_value_count_reporter
                counteroptions = {}
                counteroptions['workspace'] = options['workspace'] 
                counteroptions['inputfile'] = options['inputfile']
                counteroptions['outputfile'] = filename
                counteroptions['format'] = format
                counteroptions['termlist'] = [term]
                counteroptions['encoding'] = encoding

                # Create the reports
                results = term_value_count_reporter(counteroptions)
                if results['success'] == False:
                    outputoptions['success'] = False
                    outputoptions['message'] = results['message']
                    return outputoptions
                else:
                    artifact_key = '%s_count_file' % term
                    outputoptions['artifacts'][artifact_key] = results['outputfile']
            return outputoptions
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile : inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
      # Show the name of the upstream actor.
      messagefrom: 'CountFieldValues'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref Darwinize

# Create report on geography recommendations.
- id: CreateGeographyReport
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_recommendation_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_recommendation_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the vocabfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      vocabfile: 'lookup_geography.txt'
      # Set the outputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      outputfile: 'recommended_geography.csv'
      # Set the format for output files.
      format: 'csv'
      # Set the field combination to report on.
      key: 'continent|country|countryCode|stateProvince|county|municipality|waterBody|islandGroup|island'
      # Set the separator for the key.
      separator: '|'
      # Show the name of the upstream actor.
      messagefrom: 'CountFieldValues'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CountFieldValues

# Create a geography combination count report.
- id: CreateGeographyCountReport
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_value_count_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_value_count_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      # outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the outputfile to a specific file name.
      outputfile: 'count_geography.csv'
      # Set the format for output files.
      format: 'csv'
      # Get the termlist for this actor explicitly from here.
      termlist: ['continent', 'country', 'countrycode', 'stateprovince', 'county', 
                 'municipality', 'waterbody', 'islandgroup', 'island']
      # Show the name of the upstream actor.
      messagefrom: 'CountFieldValues'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CreateGeographyReport

# Create report on geography combinations not found in the geography lookup file.
- id: CreateMissingGeographyReport
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_unknown_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_unknown_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the inputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      inputfile: 'count_geography.csv'
      # Set the vocabfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      vocabfile: 'lookup_geography.txt'
      # Set the outputfile to a specific file name within the workspace.
      outputfile: 'new_geography.csv'
      # Set the format for output files.
      format: 'csv'
      # Set the encoding for the key.
      encoding: 'utf-8'
      # Set the field combination to report on.
      key: 'continent|country|countryCode|stateProvince|county|municipality|waterBody|islandGroup|island'
      # Set the separator for the key.
      # In this case, the whole string with |s is the key, so we do not want a separator.
      separator: None
      # Show the name of the upstream actor.
      messagefrom: 'CreateGeographyCountReport'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CreateGeographyCountReport

# Create a term count report.
- id: CreateCountryCountReport
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_value_count_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_value_count_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      # outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the outputfile to a specific file name.
      outputfile: 'count_country.csv'
      # Set the format for output files.
      format: 'csv'
      # Set the encoding for the key.
      encoding: 'utf-8'
      # Get the termlist for this actor explicitly from here.
      termlist: ['country']
      # Show the name of the upstream actor.
      messagefrom: 'CountFieldValues'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CreateMissingGeographyReport

# Create report on countries not found in the country lookup file. Note that it may be 
# rare that an unknown country string arises, as the country vocabulary from 
# https://raw.githubusercontent.com/VertNet/DwCvocabs/master/kurator/country.txt
# contains values found in the corpus of GBIF plus VertNet migrators.
- id: CreateMissingCountryReport
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_unknown_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_unknown_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the inputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      inputfile: 'count_country.csv'
      # Set the vocabfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      vocabfile: 'lookup_country.txt'
      # Set the outputfile to a specific file name within the workspace.
      outputfile: 'new_country.txt'
      # Set the format for output files.
      format: 'txt'
      # Set the field combination to report on.
      key: 'country'
      # Set the separator for the key.
      separator: '|'
      # Set the encoding for the key.
      encoding: 'utf-8'
      # Show the name of the upstream actor.
      messagefrom: 'CreateCountryCountReport'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CreateCountryCountReport

# Create a new file with geography recommendations integrated.
- id: CreateFileWithCleanGeography
  type: NativePythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.dataset_term_standardizer
    # The function to invoke in the module when the actor receives an onData message.
    onData: dataset_term_standardizer
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the vocabfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      vocabfile: 'lookup_geography.txt'
      # Set the field combination to report on.
      key: 'continent|country|countryCode|stateProvince|county|municipality|waterBody|islandGroup|island'
      # Set the separator for the key.
      separator: '|'
      # Show the name of the upstream actor.
      messagefrom: 'CountFieldValues'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CreateMissingCountryReport

# Inline python actor to take care of any unfinished business and finish the workflow.
- id: WrapUp
  type: NativePythonActor
  properties:
    onData: on_data
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        def on_data(options):
            print 'WrapUp options: %s' % options
            print '### Finished Wrapup ###'
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
        # Get the workspace for this actor from the workspace in the options dictionary.
        workspace: workspace
        # Full path to the output file.
        outputfile: outputfile
        # Get the success state from the options dictionary of the previous step
        success: previoussuccess
        # Get the message from the options dictionary of the previous step
        message: previousmessage
        # Dictionary of persistent objects created.
        artifacts: artifacts
    parameters:
      # Show the name of the upstream actor.
      messagefrom: 'CreateFileWithCleanGeography'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CreateFileWithCleanGeography
