#####################################################################################
# dwca_geography_assessor.yaml
#####################################################################################
#
# This workflow:
#    - creates a given directory as a workspace
#    - downloads a geography lookup file
#    - downloads a country lookup file
#    - downloads a given Darwin Core Archive from a URL
#    - extracts the core file of a Darwin Core Archive to a tab-separated text file
#    - extracts distinct values of various geography fields
#    - reports recommendations for geography
#    - reports counts of distinct geography combinations
#    - reports combinations of geography not found in the geography lookup file
#    - reports counts of distinct original country values
#    - reports countries not found in the country lookup file
#    - wraps up the workflow
#
# Example command-line usage:
# kurator -f dwca_geography_assessor.yaml 
#         -p workspace=./wsgeogassess
#         -p dwca_url=http://ipt.vertnet.org:8080/ipt/archive.do?r=ccber_mammals
#         -l DEBUG (optional)
#
# Requires:
# jython pip install requests
# jython pip install python-dwca-reader
# jython pip install py
# jython pip install unicodecsv
# jython pip install unidecode
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "John Wieczorek"
# __copyright__ = "Copyright 2016 President and Fellows of Harvard College"
# __version__ = "dwca_geography_assessor.yaml 2016-09-21T10:42+02:00"

imports:

- classpath:/org/kurator/akka/types.yaml

# Definitions of the Workflow and actors
components:

### The named workflow ###
- id: DwCAGeographyAssessor
  type: Workflow
  properties:
    actors:
      # Actors invoked in the workflow. Every actor that will be invoked must be on this
      # list. Though the order does not matter, it is helpful to keep the list in more
      # or less the order in which they'll be invoked, for clarity.
      - !ref MakeWorkspace
      - !ref GeographyDownloader
      - !ref CountryDownloader
      - !ref ArchiveDownloader
      - !ref DWCAtoTSVWriter
      - !ref VocabList
      - !ref VocabCountReporter
      - !ref GeographyReporter
      - !ref GeographyCountReporter
      - !ref MissingGeographyReporter
      - !ref CountryCountReporter
      - !ref MissingCountryReporter
      - !ref WrapUp
    # Each parameter defined here enters the workflow from the command line and is 
    # delivered in the options dictionary of the specified actor.
    parameters:
      # Accept a parameter called dwca_url from the command line.
      dwca_url:
        # Set the url in the options dictionary of ArchiveDownloader from the value of
        # the dwca_url parameter given on the command line.
        actor: !ref ArchiveDownloader
        parameter: url
      # Accept a parameter called workspace from the command line.
      workspace:
        # Set the workspace in the options dictionary of MakeWorkspace from the value of
        # the workspace parameter given on the command line.
        actor: !ref MakeWorkspace
        parameter: workspace

# Inline python actor to make a workspace on the fly to use for writing temporary 
# if one is not supplied in the workflow-defined parameters. It creates a unique
# workspace if a workspace location is not explicitly provided, or if the provided
# one does not exist.
- id: MakeWorkspace
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        import uuid
        import os
        # The function to run when an on_start message is received. Accepts a dictionary
        # of options.
        def on_start(options):
            print '### Started MakeWorkspace ###'
            print 'MakeWorkspace options: %s' % options
            options['success']=True
            if options.has_key('workspace') == False:
                options['workspace'] ='./workspace_'+str(uuid.uuid1())
            if not os.path.exists(options['workspace']):
                os.makedirs(options['workspace'])
            if not os.path.exists(options['workspace']):
                options['success']=False
                options['message']='Unable to create workspace at %s' % options[workspace]
            else:
                options['message']='Created workspace %s' % options['workspace']
            return options

# Download dwc_geography.txt file containing geography key to standard geography lookup.
- id: GeographyDownloader
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Get the file from a specific URL.
      url : 'https://raw.githubusercontent.com/tucotuco/DwCVocabs/master/kurator/dwc_geography.txt'
      # Download to a specific file name in the workspace received from upstream.
      outputfile : 'lookup_geography.txt'
      # Show the name of the upstream actor.
      messagefrom: 'MakeWorkspace'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref MakeWorkspace

# Download dwc_countries.txt file containing raw country to standard country lookup.
- id: CountryDownloader
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Get the file from a specific URL.
      url : 'https://raw.githubusercontent.com/tucotuco/DwCVocabs/master/kurator/country.txt'
      # url : 'https://raw.githubusercontent.com/gbif/parsers/master/src/main/resources/dictionaries/parse/countryName.txt'
      # Download to a specific file name within the workspace.
      outputfile : 'lookup_country.txt'
      # Show the name of the upstream actor.
      messagefrom: 'GeographyDownloader'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref GeographyDownloader

# Download a Darwin Core archive from a URL given by workflow-defined url parameter. 
# Download occurs in workspace provided by the upstream actor.
- id: ArchiveDownloader
  type: PythonActor
  properties:
    # The location of the actor source code
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Get the url for the options dictionary from the url parameter defined 
      # in the Workflow. It is not declared here.
      # NOTE: Would like to establish the command line source of a parameter here, within
      # the actor.

      # Set the outputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      outputfile: 'dwca.zip'
      # Set the log level in the actor explicitly
      # NOTE: Invoking logging in the Python actor causes kurator-akka thread exceptions.
      #loglevel: 'DEBUG'
#Error in atexit._run_exitfuncs:
#Traceback (most recent call last):
#  File "/Users/johnwieczorek/bin/kurator-akka.jar/Lib/atexit.py", line 24, in _run_exitfuncs
#    func(*targs, **kargs)
#  File "/Users/johnwieczorek/bin/kurator-akka.jar/Lib/threading.py", line 297, in _MainThread__exitfunc
#    t.join()
#  File "/Users/johnwieczorek/bin/kurator-akka.jar/Lib/threading.py", line 128, in join
#    raise RuntimeError("cannot join current thread")
#RuntimeError: cannot join current thread
#Error in sys.exitfunc:
#Traceback (most recent call last):
#  File "/Users/johnwieczorek/bin/kurator-akka.jar/Lib/atexit.py", line 24, in _run_exitfuncs
#  File "/Users/johnwieczorek/bin/kurator-akka.jar/Lib/threading.py", line 297, in _MainThread__exitfunc
#  File "/Users/johnwieczorek/bin/kurator-akka.jar/Lib/threading.py", line 128, in join
#RuntimeError: cannot join current thread
      # Show the name of the upstream actor.
      messagefrom: 'CountryDownloader'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CountryDownloader

# Extract core file into a tab-separated value file in workspace from Darwin Core archive.
- id: DWCAtoTSVWriter
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.dwca_core_to_tsv
    # The function to invoke in the module when the actor receives an onData message.
    onData: dwca_core_to_tsv
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the outputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      outputfile: 'dwca_extractedoccurrences.txt'
      # Show the name of the upstream actor.
      messagefrom: 'ArchiveDownloader'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref ArchiveDownloader

# Inline python actor to generate an options dictionary for each of a list of terms.
- id: VocabList
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        def on_data(options):
            print '### Started VocabList ###'
            print 'VocabList options: %s' % options
            termlist = [ \
                ['continent'], \
                ['countrycode'], \
                ['waterBody'], \
                ['islandGroup'], \
                ['island']
                ]
            for term in termlist:
                filename = 'count_'+term[0]+'.csv'
                yield { 'inputfile':options['inputfile'], 
                        'workspace':options['workspace'], 
                        'termlist':term,
                        'outputfile':filename,
                        'messagefrom':'VocabList' }
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      # outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
    parameters:
      # Set the inputfile to a specific file name.
      inputfile: 'dwca_extractedoccurrences.txt'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref DWCAtoTSVWriter

# Create a term count report.
- id: VocabCountReporter
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_value_count_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_value_count_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the inputfile in the options dictionary.
      inputfile: inputfile
      # Get the termlist for this actor from the termlist in the options dictionary.
      termlist: termlist
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the outputfile for this actor from the outputfile in the options dictionary.
      outputfile: outputfile
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the format for output files.
      format: 'csv'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref VocabList

# Create report on geography recommendations.
- id: GeographyReporter
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_recommendation_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_recommendation_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the inputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      inputfile: 'dwca_extractedoccurrences.txt'
      # Set the vocabfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      vocabfile: 'lookup_geography.txt'
      # Set the outputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      outputfile: 'recommended_geography.txt'
      # Set the format for output files.
      format: 'txt'
      # Set the field combination to report on.
      key: 'continent|country|countryCode|stateProvince|county|municipality|waterBody|islandGroup|island'
      # Set the separator for the key.
      separator: '|'
      # Show the name of the upstream actor.
      messagefrom: 'DWCAtoTSVWriter'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref DWCAtoTSVWriter

# Create a term count report.
- id: GeographyCountReporter
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_value_count_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_value_count_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      # outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the inputfile to a specific file name.
      inputfile: 'dwca_extractedoccurrences.txt'
      # Set the outputfile to a specific file name.
      outputfile: 'count_geography.csv'
      # Set the format for output files.
      format: 'csv'
      # Get the termlist for this actor explicitly from here.
      termlist: ['continent', 'country', 'countrycode', 'stateprovince', 'county', 
                 'municipality', 'waterbody', 'islandgroup', 'island']
      # Show the name of the upstream actor.
      messagefrom: 'GeographyReporter'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref GeographyReporter

# Create report on country recommendations. Note that it may be very rare that an unknown
# country string arises, as the country vocabulary from 
# https://raw.githubusercontent.com/tucotuco/DwCVocabs/master/kurator/country.txt contains
# values found in the corpus of GBIF plus VertNet migrators.
- id: MissingGeographyReporter
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_unknown_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_unknown_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the inputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      inputfile: 'count_geography.csv'
      # Set the vocabfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      vocabfile: 'lookup_geography.txt'
      # Set the outputfile to a specific file name within the workspace.
      outputfile: 'new_geography.txt'
      # Set the format for output files.
      format: 'txt'
      # Set the field combination to report on.
      key: 'continent|country|countryCode|stateProvince|county|municipality|waterBody|islandGroup|island'
      # Set the separator for the key.
      separator: '|'
      # Show the name of the upstream actor.
      messagefrom: 'GeographyCountReporter'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref GeographyCountReporter

# Create a term count report.
- id: CountryCountReporter
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_value_count_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_value_count_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      # outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the inputfile to a specific file name.
      inputfile: 'dwca_extractedoccurrences.txt'
      # Set the outputfile to a specific file name.
      outputfile: 'count_country.csv'
      # Set the format for output files.
      format: 'csv'
      # Get the termlist for this actor explicitly from here.
      termlist: ['country']
      # Show the name of the upstream actor.
      messagefrom: 'MissingGeographyReporter'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref MissingGeographyReporter

# Create report on country recommendations. Note that it may be very rare that an unknown
# country string arises, as the country vocabulary from 
# https://raw.githubusercontent.com/tucotuco/DwCVocabs/master/kurator/country.txt contains
# values found in the corpus of GBIF plus VertNet migrators.
- id: MissingCountryReporter
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_dwca.term_unknown_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_unknown_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the success state from the options dictionary of the previous step
      success: previoussuccess
      # Get the message from the options dictionary of the previous step
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the inputfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      inputfile: 'count_country.csv'
      # Set the vocabfile to a specific file name.
      # NOTE: Would like to be able to specify that this file should go in the workspace
      vocabfile: 'lookup_country.txt'
      # Set the outputfile to a specific file name within the workspace.
      outputfile: 'country_not_found.txt'
      # Set the format for output files.
      format: 'txt'
      # Set the field combination to report on.
      key: 'country'
      # Set the separator for the key.
      separator: '|'
      # Show the name of the upstream actor.
      messagefrom: 'CountryCountReporter'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref CountryCountReporter

# Inline python actor to take care of any unfinished business and finish the workflow.
- id: WrapUp
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        def on_data(options):
            print 'WrapUp options: %s' % options
            print '### Finished Wrapup ###'
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
        # Get the workspace for this actor from the workspace in the options dictionary.
        workspace: workspace
        # Full path to the output file.
        outputfile: outputfile
        # Get the success state from the options dictionary of the previous step
        success: previoussuccess
        # Get the message from the options dictionary of the previous step
        message: previousmessage
        # Dictionary of persistent objects created.
        artifacts: artifacts
    parameters:
      # Show the name of the upstream actor.
      messagefrom: 'MissingCountryReporter'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref MissingCountryReporter
