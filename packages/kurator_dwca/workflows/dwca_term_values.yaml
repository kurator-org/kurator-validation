#####################################################################################
# dwca_term_values.yaml
#####################################################################################
#
# This workflow:
#    - downloads a Darwin Core Archive from a URL
#    - extracts the core file of a Darwin Core Archive to a tab-separated text file
#    - extracts distinct values and their record counts for each field in a set 
#      of fields from the text file
#    - writes the distinct value lists to report files
#
# Example command-line usage:
# kurator -f dwca_term_values.yaml 
#         -p workspace=./wstermvalues
#         -p dwca_url=http://ipt.vertnet.org:8080/ipt/archive.do?r=ccber_mammals
#         -l DEBUG (optional)
#
# Requires:
# jython pip install requests
# jython pip install python-dwca-reader
# jython pip install py
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "John Wieczorek"
# __copyright__ = "Copyright 2016 President and Fellows of Harvard College"
# __version__ = "dwca_term_values.yaml 2016-09-11T17:04+02:00"

imports:

- classpath:/org/kurator/akka/types.yaml

components:

# Inline python actor to make a workspace on the fly to use for writing temporary 
# if one is not supplied in the workflow-defined parameters. It creates a unique
# workspace if a workspace location is not explicitly provided, or if the provided
# one does not exist.
- id: MakeWorkspace
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        import uuid
        import os
        # The function to run when an on_start message is received. Accepts a dictionary
        # of options.
        def on_start(options):
            print '### Started MakeWorkspace ###'
            print 'MakeWorkspace options: %s' % options
            if options.has_key('workspace') == False:
                options['workspace'] ='./workspace_'+str(uuid.uuid1())
            if not os.path.exists(options['workspace']):
                os.makedirs(options['workspace'])
            return options

# Download file into workspace from URL given by url parameter.
- id: Downloader
  type: PythonActor
  properties:
    # The location of the actor source code
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the url for this actor from the url in the options dictionary
      url: url
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref MakeWorkspace

# Extract core file into a tab-separated value file in workspace from Darwin Core archive.
- id: DWCAtoTSVWriter
  type: PythonActor
  properties:
    # The location of the actor source code
    module: kurator_dwca.dwca_core_to_tsv
    # The function to invoke in the module when the actor receives an onData message.
    onData: dwca_core_to_tsv
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref Downloader

# Inline python actor to demonstrate actor iteration. Passes an options dictionary 
# including the source tsv file and a term to downstream listener for each of a set of
# terms.
- id: VocabList
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        def on_data(options):
            print '### Started VocabList ###'
            print 'VocabList options: %s' % options
            termlist = ['continent', 'country', 'stateProvince', \
                'waterBody', 'islandGroup', 'island', \
                'class', 'order', 'family', 'genus', 'scientificName', \
                'type', 'language', 'license', 'basisOfRecord', 'sex', 'lifeStage', \
                'reproductiveCondition', 'establishmentMeans', 'occurrenceStatus', \
                'preparations', 'disposition', 'organismScope', 'month', 'day', \
                'geodeticDatum', 'georeferenceVerificationStatus', \
                'identificationQualifier', 'typeStatus', \
                'identificationVerificationStatus', 'taxonRank', 'nomenclaturalCode', \
                'taxonomicStatus', 'nomenclaturalStatus']
            for term in termlist:
                yield { 'inputfile':options['inputfile'], 'workspace':options['workspace'], 'termname':term }
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref DWCAtoTSVWriter

# Create a vocabulary report for every generated VocabList.
- id: VocabReporter
  type: PythonActor
  properties:
    # The location of the actor source code
    module: kurator_dwca.term_value_count_reporter
    # The function to invoke in the module when the actor receives an onData message.
    onData: term_value_count_reporter
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the inputfile in the options dictionary.
      inputfile: inputfile
      # Get the termname for this actor from the termname in the options dictionary.
      termname: termlist
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the format for output files.
      format: 'csv'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref VocabList

# Inline python actor to take care of any unfinished business and finish the workflow.
- id: WrapUp
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        def on_data(options):
            print 'WrapUp options: %s' % options
            print '### Finished WrapUp ###'
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace: workspace
      # Get the outputfile for this actor from the outputfile in the options dictionary.
      outputfile: outputfile
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref VocabReporter

# The named workflow
- id: DwCAVocabExtractor
  type: Workflow
  properties:
    actors:
      # Actors invoked in the workflow.
      - !ref MakeWorkspace
      - !ref Downloader
      - !ref DWCAtoTSVWriter
      - !ref VocabList
      - !ref VocabReporter
      - !ref WrapUp
    # Each parameter defined here enters the workflow from the command line and is 
    # delivered in the options dictionary of the specified actor.
    parameters:
      # Accept a parameter called dwca_url from the command line.
      dwca_url:
        # Set the url in the options dictionary of MakeWorkspace from the value of
        # the dwca_url parameter given on the command line.
        actor: !ref MakeWorkspace
        parameter: url
      # Accept a parameter called workspace from the command line.
      workspace:
        # Set the workspace in the options dictionary of MakeWorkspace from the value of
        # the workspace parameter given on the command line.
        actor: !ref MakeWorkspace
        parameter: workspace