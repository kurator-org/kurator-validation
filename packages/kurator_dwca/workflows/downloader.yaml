#####################################################################################
# downloader.yaml
#####################################################################################
#
# This workflow:
#    - downloads a Darwin Core Archive from a URL
#
# Example command-line usage:
# kurator -f downloader.yaml 
#         -p url=http://ipt.vertnet.org:8080/ipt/archive.do?r=ccber_mammals
#         -p outputfile=../workspace/test_ccber_archive.zip
#
# Requires:
# jython pip install requests
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "John Wieczorek"
# __copyright__ = "Copyright 2016 President and Fellows of Harvard College"
# __version__ = "downloader.yaml 2016-04-07T13:24-03:00"

imports:

- classpath:/org/kurator/akka/types.yaml
# The following would be needed to enable the Workflow webapp UI
#- classpath:/fields.yaml

components:

- id: ReadInput
  type: PythonActor
  properties:
    code: |
        import logging
        def on_start(options):
            print 'Started ReadInput'
            print 'ReadInput options: %s' % options
            return 'Good job'
# The following does not seem to be threadsafe and causes exceptions in kurator-akka
#            try:
#                loglevel = options['loglevel']
#            except:
#                loglevel = None
#            if loglevel is not None:
#                if loglevel.upper() == 'DEBUG':
#                    logging.basicConfig(level=logging.DEBUG)
#                elif loglevel.upper() == 'INFO':        
#                    logging.basicConfig(level=logging.INFO)
#            logging.info('Started ReadInput')
#            logging.debug('options: %s' % options)

- id: Downloader
  type: PythonActor
  properties:
    module: kurator_dwca.downloader
    onStart: downloader
    listensTo:
      - !ref ReadInput

- id: WriteOutput
  type: PythonActor
  properties:
    code: |
        def on_data(options):
            print 'WriteOutput options: %s' % options
            print 'Finished WriteOutput'
    listensTo:
      - !ref Downloader

- id: DownloaderWorkflow
  type: Workflow
  properties:
    actors:
      - !ref ReadInput
      - !ref Downloader
      - !ref WriteOutput
    parameters:
       loglevel:
         actor: !ref Downloader
         parameter: loglevel
       url:
         actor: !ref Downloader
         parameter: url
# By naming this parameter 'out', the webapp will create a file automatically using a GUID
       out:
         actor: !ref Downloader
         parameter: outputfile

# The following is an example form definition for the workflow webapp:
# - id: WorkflowView
#   type: FormDefinition
#   properties:
#     fields:
#       - !ref UrlField
#     name: download
#     title: Darwin Core Archive Downloader
# 
# - id: UrlField
#   type: TextField
#   properties:
#     name: url
#     label: Url
