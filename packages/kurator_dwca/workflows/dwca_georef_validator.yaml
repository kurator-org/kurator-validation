#####################################################################################
# file_georef_validator.yaml
#####################################################################################
#
# This workflow:
#    - creates a given directory as a workspace
#    - takes a file name as an option
#    - takes an output format (csv, txt) as an option
#    - creates an output file with as many fields standardized to Darwin Core as possible
#    - validates georeference fields, proposes corrections to latitude/longitude and generates ffdq report
#    - wraps up the workflow
#
# Example command-line usage:
# kurator -f dwca_georef_validator.yaml
#         -p workspace=./dwca_georef_validator_workspace
#         -p dwca_url=http://ipt.vertnet.org:8080/ipt/archive.do?r=ccber_mammals
#         -l DEBUG (optional)
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "John Wieczorek, David Lowery"
# __copyright__ = "Copyright 2017 President and Fellows of Harvard College"
# __version__ = "file_date_validator.yaml 2017-03-21T12:05:14-05:00"

imports:

- classpath:/org/kurator/akka/types.yaml

# Definitions of the Workflow and actors
components:

### The named workflow ###
- id: EventDateValidator
  type: Workflow
  properties:
    actors:
      # Actors invoked in the workflow. Every actor that will be invoked must be on this
      # list. Though the order does not matter, it is helpful to keep the list in more
      # or less the order in which they'll be invoked, for clarity.
      - !ref MakeWorkspace
      - !ref DownloadArchive
      - !ref ExtractArchiveCore
      - !ref GeoRefValidator
      - !ref WrapUp
    # Each parameter defined here enters the workflow from the command line and is
    # delivered in the options dictionary of the specified actor.
    parameters:
      # Accept a parameter called dwca_url from the command line.
      dwca_url:
        # Set the url in the options dictionary of DownloadArchive from the value of
        # the dwca_url parameter given on the command line.
        actor: !ref DownloadArchive
        parameter: url
      # Accept a parameter called workspace from the command line.
      workspace:
        # Set the workspace in the options dictionary of MakeWorkspace from the value
        # of the workspace parameter given on the command line.
        actor: !ref MakeWorkspace
        parameter: workspace

# Inline python actor to make a workspace on the fly to use for writing temporary
# if one is not supplied in the workflow-defined parameters. It creates a unique
# workspace if a workspace location is not explicitly provided, or if the provided
# one does not exist.
- id: MakeWorkspace
  type: NativePythonActor
  properties:
    onStart: on_start
    # Inline python code to run.
    code: |
        import uuid
        import os
        # The function to run when an on_start message is received. Accepts a dictionary
        # of options.
        def on_start(options):
            actor = 'MakeWorkspace'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                print '%s: %s' % (key, value)
            options['success']=True
            if options.has_key('workspace') == False:
                options['workspace'] ='./workspace_'+str(uuid.uuid1())
            if not os.path.exists(options['workspace']):
                os.makedirs(options['workspace'])
            if not os.path.exists(options['workspace']):
                options['success']=False
                options['message']='Unable to create workspace at %s' % options[workspace]
            else:
                options['message']='Created workspace %s' % options['workspace']
            return options

# Download a Darwin Core archive from a URL given by workflow-defined url parameter.
# Download occurs in workspace provided by the upstream actor.
- id: DownloadArchive
  type: NativePythonActor
  properties:
    # The location of the actor source code
    module: kurator_dwca.downloader
    # The function to invoke in the module when the actor receives an onData message.
    onData: downloader
    # A list of parameters to get from the options dictionary passed from an
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Get the url for the options dictionary from the url parameter defined
      # in the Workflow. It is not declared here.
      # NOTE: Would like to establish the command line source of a parameter here, within
      # the actor.

      # Set the outputfile to a specific file name.
      # Download to a specific file name within the workspace.
      outputfile: 'dwca.zip'
      # Invoking python logging causes thread exceptions.
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref MakeWorkspace

# Extract core file into a tab-separated value file in workspace from Darwin Core archive.
- id: ExtractArchiveCore
  type: NativePythonActor
  properties:
    # The location of the actor source code
    module: kurator_dwca.dwca_core_to_tsv
    # The function to invoke in the module when the actor receives an onData message.
    onData: dwca_core_to_tsv
    # A list of parameters to get from the options dictionary passed from an
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the outputfile to a specific file name within the workspace.
      outputfile: 'dwca_extracted_occurrences.txt'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref DownloadArchive

# Validate the georeference fields. Attempt to fill in missing lat/long values from geolocate or check transpositions
# of original coordinates to see if a valid match is found
- id: GeoRefValidator
  type: Actor
  properties:
    actorClass: org.kurator.validation.actors.GeoRefValidator
    listensTo:
      - !ref ExtractArchiveCore
    # A list of parameters to get from the options dictionary passed from an
    # upstream actor.
    inputs:
      # Get the inputfile for this actor from the outputfile in the options dictionary.
      outputfile: inputfile
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace

# Inline python actor to take care of any unfinished business and finish the workflow.
- id: WrapUp
  type: NativePythonActor
  properties:
    onData: on_data
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        def on_data(options):
            actor = 'WrapUp'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                if key == 'artifacts':
                    print 'artifacts:'
                    keylist = []
                    for akey, avalue in options[key].iteritems():
                        keylist.append(akey)
                    sortedkeylist = sorted(keylist)
                    for skey in sortedkeylist:
                        print '  %s: %s' % (skey, options[key][skey])
                else:
                    print '%s: %s' % (key, value)
            print '### Finished Wrapup ###'
    # A list of parameters to get from the options dictionary passed from an
    # upstream actor.
    parameters:
      # Show the name of the upstream actor.
      messagefrom: 'GeoRefValidator'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref GeoRefValidator
