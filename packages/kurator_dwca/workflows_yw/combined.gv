
/* Start of top-level graph */
digraph Workflow {
rankdir=TB

/* Title for graph */
fontname=Helvetica; fontsize=18; labelloc=t
label=FileTermCounterWorkflow

/* Start of double cluster for drawing box around nodes in workflow */
subgraph cluster_workflow_box_outer { label=""; color=black; penwidth=2
subgraph cluster_workflow_box_inner { label=""; penwidth=0

/* Style for nodes representing atomic programs in workflow */
node[shape=box style=filled fillcolor="#CCFFCC" peripheries=1 fontname=Helvetica]

/* Nodes representing atomic programs in workflow */
MakeWorkspace
CountFieldValues
WrapUp

/* Style for nodes representing non-parameter data channels in workflow */
node[shape=box style="rounded,filled" fillcolor="#FFFFCC" peripheries=1 fontname=Helvetica]

/* Nodes for non-parameter data channels in workflow */
"counteroptions.outputfile"
inputfile
"options.workspace"
"options.success"
"options.message"
"outputoptions.workspace"
"outputoptions.success"
"outputoptions.message"

/* Style for nodes representing parameter channels in workflow */
node[shape=box style="rounded,filled" fillcolor="#FCFCFC" peripheries=1 fontname=Helvetica]

/* Nodes representing parameter channels in workflow */
workspace
encoding
format
fieldlist

/* Edges representing connections between programs and channels */
MakeWorkspace -> "options.success"
MakeWorkspace -> "options.workspace"
MakeWorkspace -> "options.message"
MakeWorkspace -> "options.outputfile"
MakeWorkspace -> options
workspace -> MakeWorkspace
CountFieldValues -> "outputoptions.success"
CountFieldValues -> "outputoptions.message"
CountFieldValues -> "outputoptions.workspace"
CountFieldValues -> counteroptions
CountFieldValues -> "counteroptions.outputfile"
CountFieldValues -> results
CountFieldValues -> outputoptions
inputfile -> CountFieldValues
encoding -> CountFieldValues
format -> CountFieldValues
fieldlist -> CountFieldValues
"options.workspace" -> CountFieldValues
"options.success" -> CountFieldValues
"options.message" -> CountFieldValues
"outputoptions.workspace" -> WrapUp
"outputoptions.success" -> WrapUp
"outputoptions.message" -> WrapUp
messagefrom -> WrapUp

/* End of double cluster for drawing box around nodes in workflow */
}}

/* Hidden double-cluster for grouping workflow input ports */
subgraph cluster_input_ports_group_outer { label=""; penwidth=0
subgraph cluster_input_ports_group_inner { label=""; penwidth=0

/* Style for nodes representing workflow input ports */
node[shape=circle style="rounded,filled" fillcolor="#FFFFFF" peripheries=1 fontname=Helvetica width=0.2]

/* Nodes representing workflow input ports */
workspace_input_port [label=""]
inputfile_input_port [label=""]
encoding_input_port [label=""]
format_input_port [label=""]
fieldlist_input_port [label=""]

/* End of double-cluster for grouping workflow input ports */
}}

/* Hidden double-cluster for grouping workflow output ports */
subgraph cluster_output_ports_group_outer { label=""; penwidth=0
subgraph cluster_output_ports_group_inner { label=""; penwidth=0

/* Style for nodes representing workflow output ports */
node[shape=circle style="rounded,filled" fillcolor="#FFFFFF" peripheries=1 fontname=Helvetica width=0.2]

/* Nodes representing workflow output ports */
"counteroptions.outputfile_output_port" [label=""]

/* End of double-cluster for grouping workflow output ports */
}}

/* Edges from input ports to channels */
workspace_input_port -> workspace
inputfile_input_port -> inputfile
encoding_input_port -> encoding
format_input_port -> format
fieldlist_input_port -> fieldlist

/* Edges from channels to output ports */
"counteroptions.outputfile" -> "counteroptions.outputfile_output_port"

/* End of top-level graph */
}
