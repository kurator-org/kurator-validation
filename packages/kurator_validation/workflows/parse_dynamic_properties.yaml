#####################################################################################
# parse_dynamic_properties.yaml
#####################################################################################
#
# This workflow:
#    - creates a given directory as a workspace
#    - takes a file name as an option
#    - creates an output file with the value of dynamicproperties in separate columns
#    - wraps up the workflow
#
# Example command-line usage:
# kurator -f parse_dynamic_properties.yaml
#         -p workspace=./parse_dynamic_properties_workspace
#         -p inputfile=../data/onslow.csv
#         -l DEBUG (optional)
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "David B. Lowery"
# __copyright__ = "Copyright 2017 President and Fellows of Harvard College"
# __version__ = "parse_dynamic_properties.yaml 2017-01-17T10:15-03:00"

imports:

- classpath:/org/kurator/akka/types.yaml

# Definitions of the Workflow and actors
components:

### The named workflow ###
- id: DarwinizeFile
  type: Workflow
  properties:
    actors:
      # Actors invoked in the workflow. Every actor that will be invoked must be on this
      # list. Though the order does not matter, it is helpful to keep the list in more
      # or less the order in which they'll be invoked, for clarity.
      - !ref MakeWorkspace
      - !ref ParseProperties
      - !ref WrapUp
    # Each parameter defined here enters the workflow from the command line and is 
    # delivered in the options dictionary of the specified actor.
    parameters:
      # Accept a parameter called workspace from the command line.
      workspace:
        # Set the workspace in the options dictionary of MakeWorkspace from the value
        # of the workspace parameter given on the command line.
        actor: !ref MakeWorkspace
        parameter: workspace
      # Accept a parameter called inputfile from the command line.
      inputfile:
        # Set the inputfile in the options dictionary of the ParseProperties actor from the
        # value of the inputfile parameter given on the command line.
        actor: !ref ParseProperties
        parameter: inputfile

# Inline python actor to make a workspace on the fly to use for writing temporary 
# if one is not supplied in the workflow-defined parameters. It creates a unique
# workspace if a workspace location is not explicitly provided, or if the provided
# one does not exist.
- id: MakeWorkspace
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        import uuid
        import os
        # The function to run when an on_start message is received. Accepts a dictionary
        # of options.
        def on_start(options):
            actor = 'MakeWorkspace'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                print '%s: %s' % (key, value)
            options['success']=True
            if options.has_key('workspace') == False:
                options['workspace'] ='./workspace_'+str(uuid.uuid1())
            if not os.path.exists(options['workspace']):
                os.makedirs(options['workspace'])
            if not os.path.exists(options['workspace']):
                options['success']=False
                options['message']='Unable to create workspace at %s' % options[workspace]
            else:
                options['message']='Created workspace %s' % options['workspace']
            return options

# Transform the input file to a file containing separate columns for each of the parsed
# values from the dynamic properties field
- id: ParseProperties
  type: PythonActor
  properties:
    # The location of the actor source code 
    module: kurator_validation.parse_dynamic_properties
    # The function to invoke in the module when the actor receives an onData message.
    onData: parse_dynamic_properties
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
      # Get the workspace for this actor from the workspace in the options dictionary.
      workspace : workspace
      # Get the success state of the previous step from the options dictionary.
      success: previoussuccess
      # Get the message from the previous step from the options dictionary.
      message: previousmessage
    # A list of parameters to get from the parameters defined at the workflow level or
    # to set explicitly from values given in this section.
    parameters:
      # Set the outputfile to a specific file name without an extension. The extension
      # will be provided by determining the input file format
      outputfile : 'parsed_file.csv'
      # Show the name of the upstream actor.
      messagefrom: 'MakeWorkspace'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref MakeWorkspace

# Inline python actor to take care of any unfinished business and finish the workflow.
- id: WrapUp
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        def on_data(options):
            actor = 'WrapUp'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                if key == 'artifacts':
                    print 'artifacts:'
                    keylist = []
                    for akey, avalue in options[key].iteritems():
                        keylist.append(akey)
                    sortedkeylist = sorted(keylist)
                    for skey in sortedkeylist:
                        print '  %s: %s' % (skey, options[key][skey])
                else:
                    print '%s: %s' % (key, value)
            print '### Finished Wrapup ###'
    # A list of parameters to get from the options dictionary passed from an 
    # upstream actor.
    inputs:
        # Get the workspace for this actor from the workspace in the options dictionary.
        workspace: workspace
        # Get the success state from the options dictionary of the previous step
        success: previoussuccess
        # Get the message from the options dictionary of the previous step
        message: previousmessage
    parameters:
      # Show the name of the upstream actor.
      messagefrom: 'ParseProperties'
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref ParseProperties
